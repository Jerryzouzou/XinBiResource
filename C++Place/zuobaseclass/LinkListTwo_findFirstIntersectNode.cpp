#include "allh.h"
using namespace std;

/*
* 两条单链表相交的各种问题 
* 情况一：两条都是无环链表：不相交或者Y型相交--方法一：哈希表，先遍历head1，再
* 遍历head2；方法二：分别遍历head1和head2找到各自最后一个节点和链表长度，如果最后 
* 节点不是同一个则不相交，否则长的一个链表先走相差值步，再一起走，相遇的点为第一个相交点 
* 情况二：一个有环一个无环---不相交 
* 情况三：两个都有环：各自环不相交或相交再共同环或先入环在环上相交---方法：两 
* 个入环点相同则是相交再共同环，那么可以将入环点最后最后一个节点则为情况一的Y型相交；
* 入环点不同，一个入环点不走，另一个入环点走不会遇到另一个入环点则不相交，会遇到的
* 话则是先入环在环上相交，两个入环点都可以是第一个相交点 
*/

struct Node{
	int value;
	Node* next;
	Node(int a=0):value(a), next(NULL){};
};


